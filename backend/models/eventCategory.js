const mongoose = require('mongoose');

/**
 * @class Category
 * @property {string} categoryId A unique identifier for the category, generated by the system.
 * @property {string} categoryName The name of the category.
 * @property {string} categoryDescription A description of the category.
 * @property {string} categoryImage The URL of an image for the category.
 * @property {Date} createdDate The date and time when the category was created.
 * @property {Array<mongoose.Types.ObjectId>} eventsList An array of IDs of events that belong to the category.
 */


// Creates a new category mongoose schema for categories with the following fields
const CategorySchema = new mongoose.Schema({
    categoryId: {
        type: String,
        default: function () {
            const locationCode = generateRandomChars(2);
            const random4DigitNumber = generateRandomNumber(1000, 9999);
            return `C${locationCode}-${random4DigitNumber}`;
        }
    },
    categoryName: {
        type: String,
        required: [true, 'Category Name is required.'],
        validate: {
            // This function receives the value v of the categoryName that's being set or updated in a Category document.
            validator: function (v) {
                /*^[a-z0-9]+$: This regular expression matches strings that:
                Start (^) and end ($) without any extra characters.
                Are composed entirely of alphabetic characters (a-z) or numerals (0-9).
                The + ensures that there's at least one character.

                /i: This flag makes the regular expression match case-insensitive, 
                allowing for both uppercase and lowercase characters.

                */
                return /^[a-z0-9]+$/i.test(v); // Ensure alphanumeric
            },
            message: props => `${props.value} is not a valid category name! It must be alphanumeric.`
        }
    },
    categoryDescription: {
        type: String,
        required: [true, 'Category Description is required.']
    },

    categoryImage: {
        type: String,
        default: ""
    },
    createdDate: {
        type: Date,
        default: Date.now
    },
    // Field eventsList that is an array of id that will reference events tied to this category.
    eventsList: [{
        type: mongoose.Schema.Types.ObjectId,
        ref: 'events'
    }]
});

/**
 * Utility function for generating random characters.
 * @function
 * @param {Number} length - The length of the random character string.
 * @returns {String} - The generated random character string.
 */

function generateRandomChars(length) {
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    let result = '';
    for (let i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * characters.length));
    }
    return result;
}

/**
 * Utility function for generating random numbers within a specified range.
 * @function
 * @param {Number} min - The minimum value of the random number (inclusive).
 * @param {Number} max - The maximum value of the random number (inclusive).
 * @returns {Number} - The generated random number.
 */

function generateRandomNumber(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

/**
 * Mongoose model for representing events.
 * @type {Category}
 */
const Category = mongoose.model('categories', CategorySchema);
module.exports = Category;